# -*- coding: utf-8 -*-
"""breast-class

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWjzoxPdUZSE3c6NCPDCpQRyyCUfG59u
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential
import tensorflowjs as tfjs
from tensorflow.keras.layers import Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.layers import Conv1D, MaxPool1D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
print(tf.__version__)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets, metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
import seaborn as sns

# Load the Drive helper and moun
#from google.colab import drive
#drive.mount('/gdrive')

data = datasets.load_breast_cancer()
#list(data.feature_names)
print(data.DESCR)

list(data.target_names)

x = pd.DataFrame(data=data.data, columns=data.feature_names)
x.head()
#x.shape

y=data.target
print(y)

#x.hist(bins=50, figsize=(20,15))
plt.show()

# Select how the model wwill perform in the future
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0, stratify = y)

print("XTrain: ",X_train.shape, "Xtest: ", X_test.shape)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train = X_train.reshape(455, 30, 1)
X_test = X_test.reshape(114, 30, 1)

print("XTrain: ",X_train.shape, "Xtest: ", X_test.shape)

epoch=40
model = Sequential()

model.add(Conv1D(filters=32, kernel_size=2, activation='relu', input_shape=(30,1)))
model.add(BatchNormalization())
model.add(Dropout(0.2))

model.add(Conv1D(filters=64, kernel_size=2, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1, activation='sigmoid'))

model.summary()

model.compile(optimizer="Adam", loss='binary_crossentropy', metrics=['accuracy'])

# Train the Model
history = model.fit(X_train, y_train, epochs=epoch, validation_data=(X_test,y_test), verbose=1)

print("Train score:", model.evaluate(X_train, y_train))

print("Test score:", model.evaluate(X_test, y_test))

tfjs.converters.save_keras_model(model, './keras_model')
#/content/keras_model